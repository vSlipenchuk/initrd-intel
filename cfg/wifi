#!/bin/sh

#logger wifi new status request %1
#cfg=/cfg/auth/wifi.cfg

#wifi_net is variable of ssid&password separated by spaces ->   mynet1:password1 mynet2:password2

WIFI_NET=${WIFI_NET-"ssid:password"}
WIFI_FILE=${WIFI_FILE-"/home/bin/wifi.list"}
WIFI_DIR=${WIFI_DIR-"/home/wifi/net"}

#echo "NET:$WIFI_NET FILE:$WIFI_FILE DIR:$WIFI_DIR"

#temp wpa_supplicant configuration file (generated by wifi_cfg_create)
cfg=/tmp/wifi.cfg


#/home/bin/mnt/wifi/wifi.cfg

def_iface=$( (iwconfig 2>/dev/null) | grep ESSID | awk '{print $1}'|head -1 )
iface=${iface-$def_iface}

#echo default wifi interface $def_iface, now iface $iface

wifi_cfg_add1() { # add ssid:password to current config
 ssid=`echo "$1" | cut -d ':' -f 1`
 psk=`echo "$1" | cut -d ':' -f 2`
  cat << EOF >> $cfg
  network={
  scan_ssid=1
  ssid="$ssid"
  proto=WPA RSN
  key_mgmt=WPA-PSK
  pairwise=CCMP TKIP
  group=CCMP TKIP WEP104 WEP40
  psk="$psk"
  priority=10
}
EOF
}

wifi_cfg_addN() { #add sid:password <space_separated> ssid:password
for n in $1
do
   wifi_cfg_add1 "$n"
done
}

wifi_cfg_create() {
cat << EOF > $cfg
# autogen by /home/bin/wifi
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
eapol_version=1
p2p_disabled=1
EOF
wifi_cfg_addN "$WIFI_NET"
for f in  $WIFI_FILE 
do
 if [ -r $f ] ; then
   wifi_cfg_addN `cat $f`
 fi
done
# now - add ready wpa_supplicant blocks
for p in $WIFI_DIR
do
if [ -r "$p" ] ; then
   cat $p >> $cfg
fi 
done
}


wifi_stop() {
 ifconfig $iface down 
 #killall wpa_supplicant
 ps=`ps -ef | grep wpa_supplicant | grep $iface  | grep -v grep | awk '{print $2}'`
 if [ "$ps" != "" ]; then
    kill -9 $ps
    fi
 dhcpcd -kill $iface
 
 dhpid=`ps -ef | grep dhclient | grep $iface | awk '{print $2}'`
 if  [ "$dhpid" = "" ] ; then
  echo no dhclient
else
  echo " kill dhpid: $dhpid"
  kill -9 $dhpid
fi 
}




wifi_cfg_create2() {
cat << EOF > $cfg
# autogen by /home/bin/wifi
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
eapol_version=1
p2p_disabled=1
EOF
cat $1 >> $cfg
}

wifi_start() {
NET="$1"
if [ "$1" = "" ]; then
 echo Autogenerate cfg
 wifi_cfg_create
 c=$cfg
else
 if  [ -r /home/bin/mnt/wifi/$1 ] ; then
 c=/home/bin/mnt/wifi/$1
 fi
 if [ -r /home/bin/mnt/wifi/net/$1 ] ; then
 wifi_cfg_create2 /home/bin/mnt/wifi/net/$1
 c=$cfg
 fi
fi

 ifconfig $iface up
 if [ "$?" = "0" ]; then
 echo "$iface -> starting wpa and dhcpcd cfg=$c..."
 wpa_supplicant -i$iface -c$c -B 
 sleep 1
 msg=` (dhclient $iface -v  2>&1)  | grep bound | awk '{printf $3}'`
 #msg=` (dhcpcd --allowinterfaces $iface $iface 2>&1)  | grep leased`
 #msg="YES"
 wname=`iwconfig $iface | grep ESSID| awk '{print $4}' `
 notify-send "$wname" "$msg"
 echo nameserver 8.8.8.8 >> /etc/resolv.conf
 fi
 
 F=/home/wifi/bin/$1_login.sh
 #echo "F=$F"
 
 if [ -r "$F"  ] ; then
  echo " ========== start autologin =============="
      $F
 fi
 
}

state="undefined"

wifi_state() {
state=$(cat /sys/class/rfkill/rfkill2/state)
echo wifi state $state now
}

wifi_reset() {
wifi_state;
#state=$(cat /sys/class/rfkill/rfkill2/state)
echo RF state $state
case "$state" in
 "1")
     echo reset wifi $iface connection rf:$state
     wifi_stop; 
     wifi_start;
 ;;
 *)
     wifi_stop;
  ;;
esac
}

case "$1" in
  ed|edit)
     scite $0&
     ;;
 iface) # reset default iface
      export iface=$2; shift; shift;
      $0 $*
      ;;
 store)
     F=`echo $WIFI_FILE | cut -d ' ' -f 1`
     ssid=`echo "$2" | cut -d ':' -f 1`
     psk=`echo "$2" | cut -d ':' -f 2`
     if [ "$psk" = "" ] ;  then
       echo "ERROR! usage: store ssid:pass, will store to file $F"
     else
       echo "store sid=$ssid pass=$psk to file $F"
       echo "$ssid:$psk" >> $F
     fi
     ;;
 connect)
     export WIFI_NET="$2"; export WIFI_FILE=""; export  WIFI_DIR=""; # set only this wifi
     wifi restart
     ;;
 add|set)
   name="$2"
   pass="$3"
   dsc="$4"
   date=`date`
   mkdir -p /home/wifi/net
   echo "adding/reseting ssid:$name and pass:$pass comment:$dsc"
 cat << EOF > /home/wifi/net/$name
# $dsc auto-generated on $date
network={
  scan_ssid=1
  ssid="$name"
  proto=WPA RSN
  key_mgmt=WPA-PSK
  pairwise=CCMP TKIP
  group=CCMP TKIP WEP104 WEP40
  psk="$pass"
  priority=10
}
EOF

 ;;
 make_AP)
   ap=`ifconfig  -a | grep flags | awk '{print $1}' | grep ap`
   if [ "$ap" = "" ]; then
     echo NO APP create new
     iw phy phy0 interface add AP type __ap && echo iface AP created
   fi
   ;;
 clone)
   echo "create new iface wlan1 (managed)"
     #iw phy phy0 interface add wlan0 type __ap
   iw phy phy0 interface add wlan1 type managed && echo OK_created
 ;;
 share)
   echo stopping $iface
   wifi_stop
   echo config vHome3 network on $iface
   iwconfig $iface essid vHome3 mode ad-hoc  channel 4
   ch=$2
   if [ "$2" = "" ]; then
     ifconfig $iface 192.168.7.1/24 up
     echo start dnsmasq for server 192.168.7.1/24
     dnsmasq -C /home/bin/wifi.dnsmasq
     echo start NAT
     echo 1 > /proc/sys/net/ipv4/ip_forward
     iptables -t nat -A POSTROUTING --out-interface usb0 -j MASQUERADE
     echo OK
   else
     echo start client on $iface
     if [ "$ch" = "dhcp" ] ; then
       dhcpcd $iface
     else
       ifconfig $iface 192.168.7.$ch up
     fi
     echo OK
   fi
   ;;
 stop)
   echo stopping NAT 
   echo 0 > /proc/sys/net/ipv4/ip_forward
   echo kill dns-masg
   killall2 dnsmasq
  wifi_stop
  ;;
 start)
  wifi_start $2
  ;;
 restart)
  wifi_stop
  sleep 1
  wifi_start $2
  ;;
  reset)
  wifi_reset
  ;;
  state)
  wifi_state
   ;;
  scan)
  ifconfig $iface  up
  iwlist $iface scan | grep -E "ESSID|Encryption|Frequency|Signal" | sed  's/Frequency/\nFrequency/g' 
  ;;
 *)
  echo "USAGE:  scan|start|stop|restart|connect <ssid:pass>|store <ssid:pass>|iface <iface>"
  echo "        WIFI_NET  $WIFI_NET"
  echo "        WIFI_FILE $WIFI_FILE"
  echo "        WIFI_DIR  $WIFI_DIR"
  iwconfig $iface  | grep -E "ESSID|Frequency|Tx-Power"
  ifconfig   $iface | grep inet | grep -v inet6
  exit 1
  ;;
esac


